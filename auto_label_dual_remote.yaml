---
init_cmd: |
  #exec /bin/bash
  set -o pipefail
  function export_default () {
    var_name="$1"
    var_default="$2"
    eval $var_name="${!var_name:-$var_default}"
    export $var_name
    echo "  $0 -> $var_name=${!var_name}"
  }

  # source ROS
  source "/opt/ros/kinetic/setup.bash"
  # search for VPN tun device:
  #default_iface=`route -n | grep "^10.8.0.0" | tr -s " " |  cut -f8 -d" " || echo lo`
  #default_ip=`ip addr show dev "$default_iface" | grep "inet " | sed 's@ *inet \([0-9\.]*\).*@\1@' || echo 127.0.0.1`

  # load robot-specific config file
  if [ -r "$HOME/.rasberryrc" ]; then echo "*** loading $HOME/.rasberryrc" ; source "$HOME/.rasberryrc"; fi

  export_default BASE_CONFIG_DIR `readlink -f . || echo .`
  export_default ROBOT_NAME `hostname | tr "-" "_" | tr "." "_"`
  export_default SCENARIO_NAME "default"
  # load robot-specific config file
  if [ -r "$BASE_CONFIG_DIR/robots/$ROBOT_NAME.sh" ]; then echo "*** loading $BASE_CONFIG_DIR/robots/$ROBOT_NAME.sh" ; source "$BASE_CONFIG_DIR/robots/$ROBOT_NAME.sh"; fi
  # load scenario-specific config file
  if [ -r "$BASE_CONFIG_DIR/scenarios/$SCENARIO_NAME.sh" ]; then echo "*** loading $BASE_CONFIG_DIR/scenarios/$SCENARIO_NAME.sh" ; source "$BASE_CONFIG_DIR/scenarios/$SCENARIO_NAME.sh"; fi  # configure the development workspace (assuming we are in rasberry_bringup/tmule)
  #export_default CATKIN_WORKSPACE "`readlink -f ../../../.. || echo $HOME/rasberry_ws`"
  export_default CATKIN_WORKSPACE "`echo $HOME/planner_ws`"
  source "$CATKIN_WORKSPACE/devel/setup.bash"
   set ROS_MASTER to the correct IP
  # export_default ROS_MASTER "10.248.0.76"
  # export_default ROS_MASTER "192.168.0.51"
   export_default ROS_MASTER "10.0.0.1"
  # set ROS_IP not to the IP that we will connect to remotely
  export_default ROS_IP `ip route get $ROS_MASTER | grep "src" | sed 's/.*src \([0-9\.]*\).*/\1/' || echo $ROS_MASTER`
  # set ROS_HOSTNAME to the ROS_IP to avoid configuring /etc/hosts for anyone who connects
  export_default ROS_HOSTNAME "$ROS_IP"
  # use IMU?
  export_default USE_IMU true
  # the gridmap to be used (key in mongodb)
  export_default MAP "$(rospack find gnss_waypoint_navigation)/maps/white_image.yaml"
  # figure out the robot number from the hostname, assuming it is like `thorvald-XXX`
  export_default ROBOT_NO `hostname | cut -f2 -d"-"`
  # set the robot type
  export ROS_MASTER_URI="http://$ROS_MASTER:11311/"
windows:
- name: EKF_gnss_imu
  panes:
  - sleep 1; roslaunch nmea_navsat_driver nmea_navsat_bringup.launch
- name: camera
  panes:
  - sleep 2; roslaunch gnss_waypoint_navigation xsens_driver.launch
- name: display
  panes:
  - rosrun rviz rviz -d $(rospack find auto_nav)/rviz/auto_label.rviz
- name: test
  panes:
  - sleep 1;
